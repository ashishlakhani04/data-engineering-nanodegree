Glossary of Key Terms You Will Learn in this Lesson


Data Schema - Define the shape of a particular kind of data. Specifically, data schemas define the expected fields, their names, and value types for those fields. Data schemas may also indicate whether fields are required or optional.
Apache Avro - A data serialization framework which includes facilities for defining and communicating data schemas. Avro is widely used in the Kafka ecosystem and data engineering generally.
Record (Avro) - A single encoded record in the defined Avro format
Primitive Type (Avro) - In Avro, a primitive type is a type which requires no additional specification - null, boolean, int, long, float, double, bytes, string.
Complex Type (Avro) - In Avro, a complex type models data structures which may involve nesting or other advanced functionality: records, enums, maps, arrays, unions, fixed.
Schema Evolution - The process of modifying an existing schema with new, deleted, or modified fields.
Schema Compatibility - Determines whether or not two given versions of a schema are usable by a given client
Backward Compatibility - means that consumer code developed against the most recent version of an Avro Schema can use data using the prior version of a schema without modification.
Forward Compatibility - means that consumer code developed against the previous version of an Avro Schema can consume data using the newest version of a schema without modification.
Full Compatibility - means that consumers developed against the latest schema can consume data using the previous schema, and that consumers developed against the previous schema can consume data from the latest schema as well. In other words, full compatibility means that a schema change is both forward and backward compatible.
None Compatibility - disables compatibility checking by Schema Registry.



What are Data Schemas?

Data schemas help us define:
The shape of the data
The names of fields
The expected types of values
Whether certain data fields are optional or required.
Data schemas provide expectations for applications so that they can properly ingest or produce data that match that specification
Data schemas are used for communication between software
Data schemas can help us create more efficient representations with compression
Data schemas help systems develop independently of each other
Data schemas are critical in data systems and applications today
	gRPC in Kubernetes
	Apache Avro in the Hadoop Ecosystem



Streaming applications are highly dependent on data schemas

Schemas are widely used in data streaming applications to codify the data being produced and received

Schemas allow for data producers to evolve largely independently of their data consumers -- namely, streaming applications

Schemas provide the tool that stream processing applications need to evolve independently of their upstream producers

Schemas can help shield data consumers from unexpected changes in the system

Some schema systems even provide detailed information about data compatibility to help applications understand what they can or cannot do with a given piece of data, as it arrives



Apache Avro is a data serialization system that uses a binary data format.

when data in an application is shared in the Avro format, it is compressed into a binary format over the network
this binary format improves speed over the network and can help reduce storage overhead
this binary formatted data includes the application data in the Avro schema format and the schema definition.
When clients receive data from an application in Avro format, not only do they receive the data, but they also receive the Avro instructions, or schema, for how to deserialize the data from binary into their own application data model representation.



https://docs.confluent.io/current/clients/confluent-kafka-python/index.html?highlight=partition#confluent_kafka.avro.AvroProducer

https://docs.confluent.io/current/clients/confluent-kafka-python/index.html?highlight=partition#confluent_kafka.avro.AvroConsumer

https://docs.confluent.io/current/schema-registry/avro.html#schema-evolution-and-compatibility
http://avro.apache.org/docs/1.8.2/spec.html#Schema+Resolution